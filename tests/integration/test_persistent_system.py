#!/usr/bin/env python3
"""
Script de test pour le syst√®me RAG persistant avec embedding Nomic
"""

import sys
import os
from pathlib import Path

# Ajouter le projet au path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

import logging
from datetime import datetime

# Configuration du logging pour les tests
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/test_persistent_system.log')
    ]
)

logger = logging.getLogger("Test_Persistent_System")

def test_persistence_service():
    """Tester le service de persistance"""
    logger.info("üß™ Test du service de persistance")
    
    try:
        from src.services.persistence_service import PersistenceService
        
        # Initialiser le service
        persistence = PersistenceService()
        
        # Cr√©er un projet de test
        project_id = persistence.create_project(
            name="Test Project Nomic",
            description="Projet de test pour le syst√®me persistant",
            proposal_text="D√©velopper un syst√®me de transport autonome..."
        )
        
        logger.info(f"‚úÖ Projet cr√©√© : {project_id}")
        
        # R√©cup√©rer le projet
        project = persistence.get_project(project_id)
        if project:
            logger.info(f"‚úÖ Projet r√©cup√©r√© : {project.name}")
        else:
            logger.error("‚ùå √âchec r√©cup√©ration projet")
            return False
        
        # Lister tous les projets
        projects = persistence.get_all_projects()
        logger.info(f"‚úÖ {len(projects)} projet(s) dans la base")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test persistance : {str(e)}")
        return False

def test_nomic_embedding():
    """Tester l'embedding Nomic"""
    logger.info("üß™ Test de l'embedding Nomic")
    
    try:
        import ollama
        from config import config
        
        # Test de connexion au serveur Ollama
        client = ollama.Client(host=config.OLLAMA_BASE_URL)
        
        # Tester l'embedding avec Nomic
        test_text = "Ceci est un test d'embedding avec le mod√®le Nomic"
        
        response = client.embeddings(
            model=config.EMBEDDING_MODEL,
            prompt=test_text
        )
        
        embedding = response['embedding']
        logger.info(f"‚úÖ Embedding g√©n√©r√© : dimension {len(embedding)}")
        
        if len(embedding) > 0:
            logger.info(f"‚úÖ Premier √©l√©ment : {embedding[0]:.6f}")
            return True
        else:
            logger.error("‚ùå Embedding vide")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test embedding : {str(e)}")
        return False

def test_persistent_rag_system():
    """Tester le syst√®me RAG persistant complet"""
    logger.info("üß™ Test du syst√®me RAG persistant")
    
    try:
        from src.core.enhanced_persistent_rag_system import EnhancedPersistentRAGSystem
        
        # Initialiser le syst√®me
        rag_system = EnhancedPersistentRAGSystem()
        logger.info("‚úÖ Syst√®me RAG persistant initialis√©")
        
        # Cr√©er un projet de test
        project_id = rag_system.create_project(
            name="Test RAG Nomic",
            description="Test complet du syst√®me RAG avec Nomic",
            proposal_text="""
            D√©velopper un syst√®me de surveillance de trafic urbain bas√© sur l'IA.
            Le syst√®me doit pouvoir analyser les flux de circulation en temps r√©el,
            d√©tecter les anomalies et proposer des solutions d'optimisation.
            
            Exigences principales:
            - Traitement temps r√©el des donn√©es de capteurs
            - Interface utilisateur intuitive
            - Int√©gration avec les syst√®mes existants
            - Haute disponibilit√© et fiabilit√©
            """
        )
        
        logger.info(f"‚úÖ Projet RAG cr√©√© : {project_id}")
        
        # Tester les statistiques
        stats = rag_system.get_project_statistics()
        if not stats.get("error"):
            logger.info(f"‚úÖ Statistiques projet : {stats['project']['name']}")
        else:
            logger.error(f"‚ùå Erreur statistiques : {stats['error']}")
            return False
        
        # Tester la g√©n√©ration de requirements persistants
        logger.info("üîÑ Test g√©n√©ration requirements persistants...")
        
        results = rag_system.generate_persistent_requirements(
            target_phase="operational",
            requirement_types=["functional", "non_functional"],
            enable_structured_analysis=True,
            enable_cross_phase_analysis=False
        )
        
        if results.get("requirements"):
            total_reqs = sum(
                len(reqs) for phase_reqs in results["requirements"].values()
                for reqs in phase_reqs.values() if isinstance(reqs, list)
            )
            logger.info(f"‚úÖ {total_reqs} requirements g√©n√©r√©s et sauvegard√©s")
        else:
            logger.error("‚ùå Aucun requirement g√©n√©r√©")
            return False
        
        # Tester le chargement des requirements
        saved_reqs = rag_system.load_project_requirements()
        if saved_reqs.get("requirements"):
            logger.info("‚úÖ Requirements recharg√©s depuis la base")
        else:
            logger.error("‚ùå √âchec rechargement requirements")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test syst√®me RAG : {str(e)}")
        return False

def test_file_processing():
    """Tester le traitement de fichiers"""
    logger.info("üß™ Test du traitement de fichiers")
    
    try:
        from src.core.enhanced_persistent_rag_system import EnhancedPersistentRAGSystem
        
        # Cr√©er un fichier de test
        test_file_path = "temp/test_document.md"
        os.makedirs("temp", exist_ok=True)
        
        test_content = """
# Document de Test MBSE

## Introduction
Ce document pr√©sente les sp√©cifications pour un syst√®me de transport intelligent.

## Exigences Fonctionnelles
- Le syst√®me doit surveiller le trafic en temps r√©el
- Les donn√©es doivent √™tre collect√©es via des capteurs IoT
- L'interface utilisateur doit √™tre accessible via web

## Exigences Non-Fonctionnelles
- Disponibilit√© : 99.9%
- Temps de r√©ponse < 2 secondes
- S√©curit√© : chiffrement bout en bout

## Architecture
Le syst√®me comprend trois couches principales :
1. Couche de collecte de donn√©es
2. Couche de traitement
3. Couche de pr√©sentation
        """
        
        with open(test_file_path, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        # Initialiser le syst√®me RAG
        rag_system = EnhancedPersistentRAGSystem()
        
        # Cr√©er un projet pour le test
        project_id = rag_system.create_project(
            name="Test File Processing",
            description="Test du traitement de fichiers"
        )
        
        # Traiter le fichier
        results = rag_system.add_documents_to_project([test_file_path])
        
        if results["processed_files"]:
            logger.info(f"‚úÖ Fichier trait√© : {results['new_chunks']} chunks cr√©√©s")
            
            # Tester la recherche
            search_results = rag_system.query_project_documents("transport intelligent", top_k=3)
            
            if search_results.get("results"):
                logger.info(f"‚úÖ Recherche r√©ussie : {len(search_results['results'])} r√©sultats")
            else:
                logger.error("‚ùå Aucun r√©sultat de recherche")
                return False
        else:
            logger.error("‚ùå √âchec traitement fichier")
            return False
        
        # Nettoyer
        try:
            os.remove(test_file_path)
        except:
            pass
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test fichiers : {str(e)}")
        return False

def test_vectorstore_performance():
    """Tester les performances du vectorstore"""
    logger.info("üß™ Test des performances vectorstore")
    
    try:
        from src.core.enhanced_persistent_rag_system import EnhancedPersistentRAGSystem
        import time
        
        rag_system = EnhancedPersistentRAGSystem()
        
        # Cr√©er un projet de test
        project_id = rag_system.create_project(
            name="Test Performance",
            description="Test des performances"
        )
        
        # Pr√©parer des textes de test
        test_texts = [
            "Exigence fonctionnelle de surveillance du trafic",
            "Interface utilisateur pour la gestion des donn√©es",
            "Architecture syst√®me distribu√©e et scalable",
            "S√©curit√© et authentification des utilisateurs",
            "Performance et optimisation des requ√™tes"
        ]
        
        # Cr√©er des chunks de test
        chunks = []
        for i, text in enumerate(test_texts):
            chunks.append({
                "content": text,
                "metadata": {"test_chunk": i, "type": "performance_test"}
            })
        
        # Mesurer le temps d'ajout
        start_time = time.time()
        doc_id = rag_system.persistence_service.register_document("/tmp/test_perf.txt", project_id)
        rag_system.persistence_service.save_document_chunks(doc_id, project_id, chunks)
        rag_system._add_chunks_to_vectorstore(chunks, doc_id, project_id)
        add_time = time.time() - start_time
        
        logger.info(f"‚úÖ Ajout de {len(chunks)} chunks : {add_time:.3f}s")
        
        # Mesurer le temps de recherche
        start_time = time.time()
        results = rag_system.query_project_documents("surveillance trafic", top_k=3)
        search_time = time.time() - start_time
        
        logger.info(f"‚úÖ Recherche : {search_time:.3f}s pour {len(results.get('results', []))} r√©sultats")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test performance : {str(e)}")
        return False

def main():
    """Fonction principale de test"""
    logger.info("üöÄ D√©but des tests du syst√®me RAG persistant")
    
    # Cr√©er les r√©pertoires n√©cessaires
    os.makedirs("logs", exist_ok=True)
    os.makedirs("temp", exist_ok=True)
    os.makedirs("data", exist_ok=True)
    
    tests = [
        ("Service de persistance", test_persistence_service),
        ("Embedding Nomic", test_nomic_embedding),
        ("Syst√®me RAG persistant", test_persistent_rag_system),
        ("Traitement de fichiers", test_file_processing),
        ("Performance vectorstore", test_vectorstore_performance)
    ]
    
    results = {}
    
    for test_name, test_function in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ {test_name}")
        logger.info('='*50)
        
        try:
            success = test_function()
            results[test_name] = success
            
            if success:
                logger.info(f"‚úÖ {test_name} : SUCC√àS")
            else:
                logger.error(f"‚ùå {test_name} : √âCHEC")
                
        except Exception as e:
            logger.error(f"üí• {test_name} : ERREUR - {str(e)}")
            results[test_name] = False
    
    # R√©sum√© final
    logger.info(f"\n{'='*50}")
    logger.info("üìä R√âSUM√â DES TESTS")
    logger.info('='*50)
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    
    for test_name, success in results.items():
        status = "‚úÖ SUCC√àS" if success else "‚ùå √âCHEC"
        logger.info(f"{status} - {test_name}")
    
    logger.info(f"\nüéØ R√âSULTAT GLOBAL : {passed_tests}/{total_tests} tests r√©ussis")
    
    if passed_tests == total_tests:
        logger.info("üéâ Tous les tests sont pass√©s ! Le syst√®me est pr√™t.")
        return True
    else:
        logger.error("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 